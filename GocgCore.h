/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/RyoJerryYu/GocgCore */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "ocgapi.go"

#include "ocgapi.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void set_script_reader(script_reader f);
extern __declspec(dllexport) void set_card_reader(card_reader f);
extern __declspec(dllexport) void set_message_handler(message_handler f);
extern __declspec(dllexport) ptr create_duel(uint32 seed);
extern __declspec(dllexport) void start_duel(ptr pduel, uint32 options);
extern __declspec(dllexport) void end_duel(ptr pduel);
extern __declspec(dllexport) void set_player_info(ptr pduel, int32 playerid, int32 lp, int32 startcount, int32 drawcount);
extern __declspec(dllexport) void get_log_message(ptr pduel, byte* buf);
extern __declspec(dllexport) int32 get_message(ptr pduel, byte* buf);
extern __declspec(dllexport) int32 process(ptr pduel);
extern __declspec(dllexport) void new_card(ptr pduel, uint32 code, uint8 owner, uint8 playerid, uint8 location, uint8 sequence, GoUint8 position);
extern __declspec(dllexport) void new_tag_card(ptr pduel, uint32 code, uint8 owner, uint8 location);
extern __declspec(dllexport) int32 query_card(ptr pduel, uint8 playerid, uint8 location, uint8 sequence, int32 query_flag, byte* buf, int32 use_cache);
extern __declspec(dllexport) int32 query_field_count(ptr pduel, uint8 playerid, uint8 location);
extern __declspec(dllexport) int32 query_field_card(ptr pduel, uint8 playerid, uint8 location, int32 query_flag, byte* buf, int32 use_cache);
extern __declspec(dllexport) int32 query_field_info(ptr pduel, byte* buf);
extern __declspec(dllexport) void set_responsei(ptr pduel, int32 value);
extern __declspec(dllexport) void set_responseb(ptr pduel, byte* buf);
extern __declspec(dllexport) int32 preload_script(ptr pduel, char* script, int32 len);

#ifdef __cplusplus
}
#endif
